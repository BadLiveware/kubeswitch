syntax = "proto3";

package kubeconfigstore.v1;

service KubeconfigStoreService {
  // Retrieves the unique store ID
  rpc GetID(GetIDRequest) returns (GetIDResponse);

  // Retrieves the prefix for the kubeconfig context names
  rpc GetContextPrefix(GetContextPrefixRequest) returns (GetContextPrefixResponse);

  // Verifies the kubeconfig search paths
  rpc VerifyKubeconfigPaths(VerifyKubeconfigPathsRequest) returns (VerifyKubeconfigPathsResponse);

  // Starts the search and streams results
  rpc StartSearch(StartSearchRequest) returns (stream StartSearchResponse);

  // Retrieves kubeconfig bytes for a given path and optional tags
  rpc GetKubeconfigForPath(GetKubeconfigForPathRequest) returns (GetKubeconfigForPathResponse);
}

// Request message for VerifyKubeconfigPaths RPC
message VerifyKubeconfigPathsRequest {}

// Request message for StartSearch RPC
message StartSearchRequest {}

// Request message for GetID RPC
message GetIDRequest {}

message GetIDResponse {
  string id = 1;
}

message GetContextPrefixRequest {
  string path = 1;
}

message GetContextPrefixResponse {
  string prefix = 1;
}

message VerifyKubeconfigPathsResponse {
  string status = 1; // Example: "Verified" or "Error"
}

message StartSearchResponse {
  string kubeconfig_path = 1;
  map<string, string> tags = 2;
  string error_message = 3;
}

message GetKubeconfigForPathRequest {
  string path = 1;
  map<string, string> tags = 2;
}

message GetKubeconfigForPathResponse {
  bytes kubeconfig = 1;
  string error_message = 2;
}
